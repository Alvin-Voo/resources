Chrome extension contains

- a manifest.json
- a background.js script
  -- The background script is the extension's event handler; it contains listeners for browser events that are important to the extension. It lies dormant until an event is fired then performs the instructed logic. An effective background script is only loaded when it is needed and unloaded when it goes idle.

- a popup.html page (in browser action or page action)
- a popup.js script for html page ---> can inject contentscript.js into the webpage itself which read and modify the DOM of web pages the browser visits.
- addtionally can include 'options_page' for user's further configuration
- options page make use of html and js as well
- content scripts - scripts that can be injected to a webpage to manipulate DOM and send data back to the parent extensions. Content scripts cannot interfere with webpage script, they are each existing in what called isolated worlds.

browser actions should be used for features that make sense on MOST page; while page actions the opposite. An extension using a page action and a popup can use the declarative content API to set rules in the background script for when the popup is available to users.


installed chrome extensions in linux: /home/alvinvoo/.config/chromium/Default/Extensions/*id*


------
content scripts:

use programmtic OR declarative injection

[webpage]             <--send/receive messages-->  [extension]
inject						
content.js

use 					use chrome.runtime.onMessage.addListener
chrome.runtime				& chrome.tabs.sendMessage(tabs[0].id,..)
.onMessage.addListener(..)
&
chrome.runtime
.sendMessage(..)

to receive/send messages

https://developer.chrome.com/extensions/messaging

HOW TO SOLVE THE unreachable WINDOW object??

->Content scripts execute in a special environment called an isolated world. They have access to the DOM of the page they are injected into, but not to any JavaScript variables or functions created by the page.

Since this injected js file is being loaded via a chrome-extension: URL from within the DOM, "script.js" must be added to the web_accessible_resources section of the manifest file. Otherwise Chrome will refuse to load the script file.

**?
You should run as little logic as possible in the web page, and handle most of your logic in the content script. This has multiple reasons. First and foremost, any script injected in the page runs in the same context as the web page, so the web page can (deliberately or inadvertently) modify JavaScript/DOM methods in such a way that your extension stops working. Secondly, content script have access to extra features, such a limited subset of the chrome.* APIs and cross-origin network requests (provided that the extension has declared permissions for those).

->Popup.js is refreshed everytime the extension icon is clicked BUT background script is NOT (unless the extension is refresh/redeployed).

---> only supports chrome.runtime.. there's NO chrome.tabs in content script!



-------------------------
Redux for chrome extension:

To store persistent store state in the background.js. Use react-chrome-redux.

https://github.com/tshaddix/react-chrome-redux














*** use 'storage explorer' extension to manage storage area of chrome extension. (Therefore, its not secure)
